[{"text":"Configuration Site Configuration For global site config you edit the _config.yaml in the root folder: name: My Cool Blog                      # website name\ndescription: My Cool Blog Description   # website description\nbase_url: https://mydomain.com/subpath  # URL where website will be deployed\n\ntheme:\n  source: my_theme                      # website theme\n\ncategories:\n  blog:                 # content/blog/ folder\n    label: Blog\n  docs:                 # content/docs/ folder\n    label: Documentation\n\n\nlang: en                # default language\ntimezone: Europe/Sarajevo\n...\n The base_url can also be specified as an environment variable FLATMARK_BASE_URL. Page Configuration Put the configuration at the top of your page file, in YAML format, like this: ---\ntitle: Hello\ntags: [scala, java]\npublish_date: 2025-01-01 11:11  # in timezone specified in the _config.yaml\npublish: yes | no | hide        # hide means published but not listed/searched/google-indexed, default is yes\n---\n\n# Hello Configuration\n\nThis is my first post!\n The page configuration section is optional. The file needs to start with --- and the config ends with another ---. This type of config is called \"YAML front matter\".","title":"Configuration","url":"https://sake92.github.io/flatmark/reference/configuration.html"},{"text":"Themes By default, Flatmark uses the default theme, downloaded from Flatmark repository. It is based on PicoCSS. You can use a different theme by setting it in the _config.yaml file: theme:\n  source: my_local_theme\n# or\ntheme:\n  source: https://github.com/sake92/flatmark?branch=main&folder=a_folder\n In the first case, the theme is taken from the local _themes/my_local_theme folder. In the second case, it is downloaded from the GitHub repository, from a specific branch (default is main), and a specific folder (default is repo root /). The folders read from theme are: static, _layouts, _includes, _i18n You can override any file in those folders by mirroring them in your site folder. For example, if you want to override the default.peb layout, you can create a _layouts/default.peb file in your site folder.","title":"Themes","url":"https://sake92.github.io/flatmark/reference/themes.html"},{"text":"File Layout Content Structure content/\n    index.md            <-- index page\n    blog                  <-- the blog category\n        index.md            <-- index page for blog posts\n        mypost.md           <-- one blog post\n    docs                <-- the docs category\n        index.md          <-- index page for docs\n        mypost.md         <-- one doc page\n    404.md              <-- 404 not found page\n    bs/                 <-- translations live in lang-code/ named folders\n        index.md\n        blog/mypost.md    <-- translated post\n\nstatic/                 <-- static files, copied as-is to the output\n    images/favicon.ico\n    styles/main.css\n    scripts/main.js\n\n First level of folders in content/ are categories. The index.md (or index.html) pages are special. They get the list of all pages in the category in the paginator argument, so you can list those items there. For example, the content/blog/index.md would receive paginator with all the blog posts. Other # config\n_config.yaml        <-- global config\n\n_layouts/           <-- templates\n    default.peb       <-- default layout: for index page, about page etc\n    post.peb          <-- layout for posts\n\n_includes/          <-- snippets/fragments/helpers\n    header.peb        <-- header snippet\n    footer.peb        <-- footer snippet\n    search.peb        <-- search form snippet\n    pagination.peb    <-- pagination snippet\n\n_i18n/              <-- translations for the site\n    my_translations.yaml            <-- default language translations\n    my_translations_de.yaml         <-- german translations\n\n_themes/           <-- custom, local themes\n    my_theme/          <-- local theme folder\n        _layouts/         <-- local theme layouts\n        _includes/        <-- local theme includes\n\n_site/              <-- result of rendering, this will be deployed\n\n.flatmark-cache     <-- cache for the flatmark results, can be deleted\n Notice that all folders that have prefix _ or . are some kind of configuration. The _config.yaml file is the global configuration file. The _layouts/ folder contains templates for the pages. You can override a theme layout by creating a file with the same name in the _layouts/ folder, like _layouts/page.peb. The _includes/ folder contains reusable snippets, like header, footer, search form, etc. You can override a theme include by creating a file with the same name in the _includes/ folder, like _includes/footer.peb. The _site/ folder is the output folder, where the rendered files will be placed. The .flatmark-cache folder is used to store the cache for the flatmark results. These are: cached diagram rendering results downloaded themes","title":"File Layout","url":"https://sake92.github.io/flatmark/reference/files-layout.html"},{"text":"","title":"Untitled","url":"https://sake92.github.io/flatmark/search/results.html"},{"text":"How to make a series of tutorials? Tutorials:\n\n{{ '{%' }} set tutorials = [\n    { \"label\": \"My tutorial 1\", \"link\": \"/tutorials/tutorial1.html\" },\n    { \"label\": \"My tutorial 2\", \"link\": \"/tutorials/tutorial2.html\" }\n] %}\n\n Gotchas Can't add content to a template that extends another template When you extend a template: \n{{ '{%' }} extends \"base.html\" %}\n\n{{ '{%' }} block title %}\n    {{ '{{' }}page.title}}\n{{ '{%' }} endblock %}\n\n---\ncant add this!!!\n\n{{ '{%' }} block hack %}\n    cant add this either!!!\n{{ '{%' }} endblock %}\n\n note that you can only override blocks that are defined in the base template, you cannot create new blocks or add content. Can't use TOC in a page You must use it inside a template. This is a technical limitation, because we take the header ids from markdown-generated HTML.","title":"How Tos","url":"https://sake92.github.io/flatmark/howtos/index.html"},{"text":"Reference Configuration Files layout Themes","title":"Reference","url":"https://sake92.github.io/flatmark/reference/index.html"},{"text":"https://github.com/sake92/flatmark/tree/main/examples","title":"Tutorials","url":"https://sake92.github.io/flatmark/tutorials/index.html"},{"text":"Flatmark Documentation Flatmark tries to be a simple static site generator without too much configuration. It is based on Jinjava for templating and uses CommonMark for markdown rendering. Most of rendering is done statically: code highlighting, math, diagrams, etc. The only thing you usually need to add for those is CSS. Markdown Syntax is based on commonmark standard with some extensions: tables strikethrough with double tilde: ~~text~~ autolink, turns plain text links into links, no need for markdown angle brackets: https://example.com footnotes, use [^1] to create a footnote and [1]: footnote text to define it ins, use ++text++ to mark text as inserted (underlined) task-list-items, use - [ ] for unchecked and - [x] for checked items image-attributes, use {width=100%} to set image width, {height=50px} for height etc. heading-anchor, automatically adds ids to headings You can learn markdown in 60 seconds. Syntax Highlighting To use code syntax highlighting, use the code block syntax with the language specified: ```scala\nval x = 5\n```\n Result: val x = 5\n Syntax highlighting is done via highlight.js. Math To use math blocks, use the math code block syntax: ```math\nx = 5\n```\n Result: x=5x = 5 x=5 For more details, see KaTeX. Mermaid Diagrams To create Mermaid diagrams, use the diagram:mermaid code block syntax: ```diagram:mermaid\nsequenceDiagram\n        actor Alice\n        actor Bob\n        Alice->>Bob: Hi Bob\n        Bob->>Alice: Hi Alice\n```\n Result: #mermaid-1751389903040{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-1751389903040 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-1751389903040 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-1751389903040 .error-icon{fill:#552222;}#mermaid-1751389903040 .error-text{fill:#552222;stroke:#552222;}#mermaid-1751389903040 .edge-thickness-normal{stroke-width:1px;}#mermaid-1751389903040 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1751389903040 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1751389903040 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-1751389903040 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1751389903040 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1751389903040 .marker{fill:#333333;stroke:#333333;}#mermaid-1751389903040 .marker.cross{stroke:#333333;}#mermaid-1751389903040 svg{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;}#mermaid-1751389903040 p{margin:0;}#mermaid-1751389903040 .actor{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1751389903040 text.actor>tspan{fill:black;stroke:none;}#mermaid-1751389903040 .actor-line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);}#mermaid-1751389903040 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333;}#mermaid-1751389903040 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#333;}#mermaid-1751389903040 #arrowhead path{fill:#333;stroke:#333;}#mermaid-1751389903040 .sequenceNumber{fill:white;}#mermaid-1751389903040 #sequencenumber{fill:#333;}#mermaid-1751389903040 #crosshead path{fill:#333;stroke:#333;}#mermaid-1751389903040 .messageText{fill:#333;stroke:none;}#mermaid-1751389903040 .labelBox{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1751389903040 .labelText,#mermaid-1751389903040 .labelText>tspan{fill:black;stroke:none;}#mermaid-1751389903040 .loopText,#mermaid-1751389903040 .loopText>tspan{fill:black;stroke:none;}#mermaid-1751389903040 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);}#mermaid-1751389903040 .note{stroke:#aaaa33;fill:#fff5ad;}#mermaid-1751389903040 .noteText,#mermaid-1751389903040 .noteText>tspan{fill:black;stroke:none;}#mermaid-1751389903040 .activation0{fill:#f4f4f4;stroke:#666;}#mermaid-1751389903040 .activation1{fill:#f4f4f4;stroke:#666;}#mermaid-1751389903040 .activation2{fill:#f4f4f4;stroke:#666;}#mermaid-1751389903040 .actorPopupMenu{position:absolute;}#mermaid-1751389903040 .actorPopupMenuPanel{position:absolute;fill:#ECECFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-1751389903040 .actor-man line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1751389903040 .actor-man circle,#mermaid-1751389903040 line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;stroke-width:2px;}#mermaid-1751389903040 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}AliceBobHi BobHi AliceAliceBob For more details, see Mermaid documentation. Graphviz Diagrams To create Graphviz diagrams, use the diagram:graphviz code block syntax: ```diagram:graphviz\ndigraph G {Hello->World}\n```\n Result: digraph G {Hello->World} For more details, see Graphviz documentation.","title":"Home","url":"https://sake92.github.io/flatmark/index.html"}]