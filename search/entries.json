[{"text":"","title":"Untitled","url":"https://sake92.github.io/flatmark/search/results.html"},{"text":"Quickstart Installation Go to the releases page. Download the installer for your platform and install it. There are no dependencies you need to install. It works on macOS, Linux and Windows. When you type flatmark --version it should print the version of Flatmark: user$ flatmark --version\nFlatmark CLI 1.2.3\n Create a new site Make a new folder for your site, e.g. my_site. Then create a new folder in it, called content. Finally, inside content, create a new file called index.md with the following content: # Welcome to Flatmark!\n The structure of your site should look like this: my_site/\n└── content/\n    └── index.md\n You can take a look at the example in GitHub for reference. Build and serve the site Now you can run the Flatmark CLI to generate and serve your site locally. Open a terminal, navigate to your my_site folder, and run the following command: user$ flatmark serve\n Then open your browser and go to http://localhost:5555. You should see your site with the content of index.md. When you change a file, the site will automatically rebuild and browser will reload it. The generated site files will be in the my_site/_site folder.","title":"Quickstart","url":"https://sake92.github.io/flatmark/tutorials/quickstart.html"},{"text":"Multilingual Site This tutorial builds on the Quickstart tutorial. It shows how to create a multilingual site with Flatmark. We need to add a bit of configuration to our site. Create a file named _config.yaml in the root of your site folder (my_site/) with the following content: lang: en\n This sets the default language of your site to English. You can set it to any language code you prefer, such as fr for French or de for German. For full reference of language codes and subcodes, see https://www.w3.org/International/articles/language-tags/ The content/ root folder contains the pages for your default language. To add another language, create a subfolder named bs/ (or any other name for your second language) inside the content/ folder. The files structure is mirrored, so the files should be called the same in both languages. This is how it should look like this: my_site/\n└── content/\n    ├── index.md\n    ├── about/\n    │   └── index.md\n    └── bs/\n        ├── index.md\n        └── about/\n            └── index.md\n The bs/ files will be served at http://localhost:5555/bs/ URL. When you flatmark serve the site and open it, you should see a language switcher in the header on the top right. You can take a look at the example in GitHub for reference. Example site: https://sake.ba/","title":"Multilingual Site","url":"https://sake92.github.io/flatmark/tutorials/multilang.html"},{"text":"Custom Local Theme This tutorial builds on the Quickstart tutorial. It shows how to use a local theme with Flatmark. Configuring a Local Theme Add this to _config.yaml: theme:\n  source: my_theme\n This tells Flatmark to use our local theme called my_theme. It needs to be in the _themes/ folder of your site. The build fails because it can't find the theme: ba.sake.flatmark.FlatmarkException: Local theme folder does not exist. Please create it or use a valid theme URL.\n Create a new folder in my_site/, called _themes/my_theme/. This part is fixed now. Creating a Layout for index.md But we have a different error: ba.sake.flatmark.FlatmarkException: Template 'index.html' not found in content/ or _layouts/ or theme _layouts/.\n We are missing the index.html layout, so let's fix that. Inside _themes/my_theme/ create a file _layouts/index.html. The index.html layout is used for all index.md files. (can be overriden) Now the build succeeds. The files structure should look like this: my_site/\n├── _config.yaml\n├── content/\n│   └── index.md\n└── _themes/\n    └── my_theme/\n        └── _layouts/\n            └── index.html\n But we get an empty page because we don't have any content in the layout. Let's add some content to the index.html layout: <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"color-scheme\" content=\"light dark\">\n    <title>{{ '{{' }} site.name {{ '}}' }}</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/a11y-dark.min.css\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.16.22/dist/katex.min.css\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/water.css@2/out/water.css\">\n</head>\n<body>\n<main>\n    {{'{{'}} page.content {{'}}'}} \n</main>\n\n</body>\n</html>\n Success, now it works! The curly braces `` are used to insert variables in the template. This is a Jinja template, so we can use Jinja syntax to insert variables, use control structures and its filters etc. Adding More Pages Let's add another page: about.md in the content/ folder: # About Me\n We get a similar error: ba.sake.flatmark.FlatmarkException: Template 'page.html' not found in content/ or _layouts/ or theme _layouts/.\n Now we are missing the page.html layout. At this point, we can copy-paste the index.html layout to page.html and it will work. But this is not a good practice. Let's rename the index.html layout to base.html, and replace the <main> tag with this: \n{{ '{%' }} block content %}\n{{ '{%' }} endblock %} \n\n The content block is like a slot where each page can insert its content. We need to update the index.html layout to extend the base.html layout: \n{{ '{%' }} extends \"base.html\" %}\n\n{{ '{%' }} block content %}\n    {{'{{'}} page.content {{'}}'}}\n{{ '{%' }} endblock %} \n\n\n And the page.html: \n{{ '{%' }} extends \"base.html\" %}\n\n{{ '{%' }} block content %}\n    {{'{{'}} page.content {{'}}'}}\n\n    Custom content for the page goes here.\n{{ '{%' }} endblock %}","title":"Custom Local Theme","url":"https://sake92.github.io/flatmark/tutorials/custom_local_theme.html"},{"text":"Gotchas Can't add content to a template that extends another template When you extend a template: \n{{ '{%' }} extends \"base.html\" %}\n\n{{ '{%' }} block title %}\n    {{ '{{' }}page.title}}\n{{ '{%' }} endblock %}\n\n---\ncant add this!!!\n\n{{ '{%' }} block hack %}\n    cant add this either!!!\n{{ '{%' }} endblock %}\n\n note that you can only override blocks that are defined in the base template, you cannot create new blocks or add content. Can't use TOC in a page You must use it inside a template. This is a technical limitation, because we take the header ids from markdown-generated HTML.","title":"Gotchas","url":"https://sake92.github.io/flatmark/howtos/gotchas.html"},{"text":"Content How Tos How to make a series of tutorials? The default pagination might not fit your use case. For example, you might want to have a series of tutorials, which are ordered in a fixed way (not by publish date or title..). For this, you can use Jinja variables to define a list of tutorials. Then use a for loop to render them: Tutorials:\n\n{{ '{%' }} set tutorials = [\n    { \"label\": \"My tutorial 1\", \"url\": \"/tutorials/tutorial1.html\" },\n    { \"label\": \"My tutorial 2\", \"url\": \"/tutorials/tutorial2.html\" }\n] %}\n\n\n\n{{ '{%' }} for tut in tutorials %}\n- [{{ '{{' }} tut.label }}]({{ '{{' }} tut.url }})\n{{ '{%' }} endfor %}","title":"Content How Tos","url":"https://sake92.github.io/flatmark/howtos/content.html"},{"text":"Search After it processes all of the content, Flatmark will create a search index file named _site/search/entries.json. It looks like this: [\n  {\n    \"text\": \"Text of the page\",\n    \"title\": \"Title of the page\",\n    \"url\": \"/path/to/page.html\"\n  },\n  ...\n]\n The next step is to create a search results page. You need to create a file content/search/results.md with the following content: layout: search-results.html\n The default theme will do the rest. Note that search.enabled must be set to true in the _config.yaml file (default is true).","title":"Search","url":"https://sake92.github.io/flatmark/reference/search.html"},{"text":"Configuration Site Configuration For global site config you edit the _config.yaml in the root folder: name: My Cool Blog                      # website name\ndescription: My Cool Blog Description   # website description\nbase_url: https://mydomain.com/subpath  # URL where website will be deployed\n\ntheme:\n  enabled: true                         # enable theme\n  source: my_local_theme                # website theme\n\nsearch:\n  enabled: true                         # enable search\ncode_highlight:\n  enabled: true                         # enable code highlighting\nmath_highlight:\n  enabled: true                         # enable math highlighting\n\ncategories:\n  blog:                                 # content/blog/ folder\n    label: Blog\n  docs:                                 # content/docs/ folder\n    label: Documentation\n\n\nlang: en                                # default language\ntimezone: Europe/Sarajevo\n...\n The base_url can also be specified as an environment variable FLATMARK_BASE_URL. Page Configuration Put the configuration at the top of your page file, in YAML format, like this: ---\ntitle: Hello\ndescription: My description\npublish_date: 2025-01-01 11:11    # in timezone specified in the _config.yaml\nlayout: page.html\next: html                         # extension of the generated file, default is html\n\npublish: yes\ntags: [scala, java]\n\npagination:\n  enabled: true                   # enable pagination for this index.md page\n  per_page: 10                    # number of items per page\n  sort_by: -publish_date          # sort by publish date, descending\n\ntheme_props:\n  my_theme_prop: my_value         # theme specific properties\n---\n\n\n# Hello {{ '{{' }}page.title{{ '}}' }}\n\n\nThis is my first post!\n The page configuration section is optional. If used, the file needs to start with ---, the config ends with another ---. This type of config is called \"YAML front matter\".","title":"Configuration","url":"https://sake92.github.io/flatmark/reference/configuration.html"},{"text":"Themes By default, Flatmark uses the default theme, downloaded from flatmark-themes repository. It is based on PicoCSS. You can use a different theme by setting it in the _config.yaml file: theme:\n  source: my_local_theme\n# or\ntheme:\n  source: https://github.com/my_user/my_repo?branch=main&folder=my_folder\n In the first case, the theme is taken from the local _themes/my_local_theme folder. In the second case, it is downloaded from the GitHub repository, from a specific branch (default is main), and a specific folder (default is repo root /). The folders read from theme are: static, _layouts, _includes, _i18n You can override any file in those folders by mirroring them in your site folder. For example, if you want to override the page.html layout, you can create a _layouts/page.html file in your site folder.","title":"Themes","url":"https://sake92.github.io/flatmark/reference/themes.html"},{"text":"Files Layout Content Structure content/\n├── index.md            <-- index page\n├── blog                  <-- the blog category/\n│   ├── index.md            <-- index page for blog posts\n│   └── mypost.md           <-- one blog post\n├── docs                <-- the docs category/\n│   ├── index.md          <-- index page for docs\n│   └── mypost.md         <-- one doc page\n├── 404.md              <-- 404 not found page\n└── bs/                 <-- translations live in lang-code/ named folders/\n    ├── index.md\n    └── blog/mypost.md    <-- translated post\n\nstatic/                 <-- static files, copied as-is to the _site/\n├── images/favicon.ico\n├── styles/main.css\n└── scripts/main.js\n First level of folders in content/ are categories. The index.md (or index.html) pages are special. They get the list of all pages in the category in the paginator argument, so you can list those items there. For example, the content/blog/index.md would receive paginator with all the blog posts. Other _config.yaml        <-- global site config\n\n_layouts/           <-- templates\n├── base.html         <-- base layout extended by other layouts\n├── index.html        <-- index.md layout\n└── page.html         <-- pages layout\n\n_includes/          <-- snippets/fragments/helpers/\n├── header.html      <-- header snippet\n├── footer.html      <-- footer snippet\n├── toc.html         <-- table of contents snippet\n└── pagination.html  <-- pagination snippet\n\n_i18n/                              <-- dynamic translations for the site\n├── my_translations.properties        <-- default language translations\n└── my_translations_de.properties     <-- german translations\n\n_themes/            <-- custom local themes\n└── my_theme/         <-- local theme folder/\n    ├── _layouts/       <-- local theme layouts\n    └── _includes/      <-- local theme includes\n\n_site/              <-- result of rendering, this will be deployed\n\n.flatmark-cache     <-- cache for the flatmark results, can be deleted\n Notice that all folders that have prefix _ or . are some kind of configuration. The _config.yaml file is the global configuration file. The _layouts/ folder contains templates for the pages. You can override a theme layout by creating a file with the same name in the _layouts/ folder, like _layouts/page.html. The _includes/ folder contains reusable snippets, like header, footer, search form, etc. You can override a theme include by creating a file with the same name in the _includes/ folder, like _includes/footer.html. The _site/ folder is the output folder, where the rendered files will be placed. The .flatmark-cache folder is used to store the cache for the flatmark results. These are: cached diagram rendering results downloaded themes","title":"Files Layout","url":"https://sake92.github.io/flatmark/reference/files-layout.html"},{"text":"Flatmark Flatmark strives to be the most static ⚡ site generator with sensible defaults. It is based on Jinja for templating and uses CommonMark for markdown rendering. Most of rendering is done statically: code highlighting, math snippets, diagrams, etc. The only thing you usually need to add for those is CSS. Markdown Syntax is based on commonmark standard with some extensions: GitHub-style tables strikethrough with double tilde: ~~text~~ autolink, turns plain text links into links, no need for markdown angle brackets, just write https://example.com footnotes, use [^1] to create a footnote and [1]: footnote text to define it ins, use ++text++ to mark text as inserted (underlined) task list items, use - [ ] for unchecked and - [x] for checked items image attributes, use {width=100%} to set image width, {height=50px} for height etc. heading anchor, automatically adds ids to headings (<h1>, <h2>, etc.) You can learn markdown in 60 seconds. Syntax Highlighting To use code syntax highlighting, use the code block syntax with the language specified: ```scala\nval x = 5\n```\n Result: val x = 5\n Syntax highlighting is done via highlight.js. Math To use math blocks, use the math code block syntax: ```math\nx = 5\n```\n Result: x=5x = 5 x=5 For more details, see KaTeX. Mermaid Diagrams To create Mermaid diagrams, use the diagram:mermaid code block syntax: ```diagram:mermaid\nsequenceDiagram\n        actor Alice\n        actor Bob\n        Alice->>Bob: Hi Bob\n        Bob->>Alice: Hi Alice\n```\n Result: #mermaid-1751550057721{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-1751550057721 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-1751550057721 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-1751550057721 .error-icon{fill:#552222;}#mermaid-1751550057721 .error-text{fill:#552222;stroke:#552222;}#mermaid-1751550057721 .edge-thickness-normal{stroke-width:1px;}#mermaid-1751550057721 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1751550057721 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1751550057721 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-1751550057721 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1751550057721 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1751550057721 .marker{fill:#333333;stroke:#333333;}#mermaid-1751550057721 .marker.cross{stroke:#333333;}#mermaid-1751550057721 svg{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;}#mermaid-1751550057721 p{margin:0;}#mermaid-1751550057721 .actor{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1751550057721 text.actor>tspan{fill:black;stroke:none;}#mermaid-1751550057721 .actor-line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);}#mermaid-1751550057721 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333;}#mermaid-1751550057721 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#333;}#mermaid-1751550057721 #arrowhead path{fill:#333;stroke:#333;}#mermaid-1751550057721 .sequenceNumber{fill:white;}#mermaid-1751550057721 #sequencenumber{fill:#333;}#mermaid-1751550057721 #crosshead path{fill:#333;stroke:#333;}#mermaid-1751550057721 .messageText{fill:#333;stroke:none;}#mermaid-1751550057721 .labelBox{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1751550057721 .labelText,#mermaid-1751550057721 .labelText>tspan{fill:black;stroke:none;}#mermaid-1751550057721 .loopText,#mermaid-1751550057721 .loopText>tspan{fill:black;stroke:none;}#mermaid-1751550057721 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);}#mermaid-1751550057721 .note{stroke:#aaaa33;fill:#fff5ad;}#mermaid-1751550057721 .noteText,#mermaid-1751550057721 .noteText>tspan{fill:black;stroke:none;}#mermaid-1751550057721 .activation0{fill:#f4f4f4;stroke:#666;}#mermaid-1751550057721 .activation1{fill:#f4f4f4;stroke:#666;}#mermaid-1751550057721 .activation2{fill:#f4f4f4;stroke:#666;}#mermaid-1751550057721 .actorPopupMenu{position:absolute;}#mermaid-1751550057721 .actorPopupMenuPanel{position:absolute;fill:#ECECFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-1751550057721 .actor-man line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1751550057721 .actor-man circle,#mermaid-1751550057721 line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;stroke-width:2px;}#mermaid-1751550057721 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}AliceBobHi BobHi AliceAliceBob For more details, see Mermaid documentation. Graphviz Diagrams To create Graphviz diagrams, use the diagram:graphviz code block syntax: ```diagram:graphviz\ndigraph G {Hello->World}\n```\n Result: G Hello Hello World World Hello->World For more details, see Graphviz documentation.","title":"Home","url":"https://sake92.github.io/flatmark/index.html"},{"text":"Tutorials Quickstart Multilingual Site Custom Local Theme","title":"Tutorials","url":"https://sake92.github.io/flatmark/tutorials/index.html"},{"text":"How Tos Content Gotchas","title":"How Tos","url":"https://sake92.github.io/flatmark/howtos/index.html"},{"text":"Reference Configuration Files layout Themes Search","title":"Reference","url":"https://sake92.github.io/flatmark/reference/index.html"}]