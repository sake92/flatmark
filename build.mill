package build

import coursier.MavenRepository
import mill._
import scalalib._
import mill.util.Jvm

object core extends ScalaModule with NativeImageModule {

  def scalaVersion = "3.7.0"

  def ivyDeps = Agg(
    ivy"com.lihaoyi::os-lib:0.11.4",
    ivy"org.graalvm.polyglot:polyglot:24.2.1",
    ivy"org.graalvm.polyglot:js:24.2.1",
    ivy"org.graalvm.polyglot:wasm:24.2.1",
    // ivy"org.graalvm.polyglot:js-community:24.2.1",
    // ivy"org.graalvm.polyglot:wasm-community:24.2.1",
    ivy"org.commonmark:commonmark:0.24.0",
    ivy"org.commonmark:commonmark-ext-gfm-tables:0.24.0",
    ivy"org.commonmark:commonmark-ext-gfm-strikethrough:0.24.0",
    ivy"org.commonmark:commonmark-ext-autolink:0.24.0",
    ivy"org.commonmark:commonmark-ext-heading-anchor:0.24.0",
    ivy"org.commonmark:commonmark-ext-footnotes:0.24.0",
    ivy"org.commonmark:commonmark-ext-ins:0.24.0",
    ivy"org.commonmark:commonmark-ext-image-attributes:0.24.0",
    ivy"org.commonmark:commonmark-ext-task-list-items:0.24.0",
    //stari commonmark.. ivy"fr.brouillard.oss:commonmark-ext-notifications:1.1.0",
    ivy"com.github.jknack:handlebars:4.4.0"
  )
  
/*
  def repositoriesTask = Task.Anon {
    super.repositoriesTask() ++ Seq(MavenRepository("https://jitpack.io"))
  }*/

}

object flatmark extends ScalaModule with CustomJpackageModule {

  def scalaVersion = "3.7.0"

  // def mainClass = Some("ba.sake.flatmark.cli")

  def moduleDeps = Seq(core)

  // samo za windows zasad
  def jpackageType = "msi"
}

import mill.util.Jvm
trait CustomJpackageModule extends JpackageModule {
  def jpackageAppImage2: T[PathRef] = Task {
    // materialize all jars into a "lib" dir
    val libs = Task.dest / "lib"
    val cp = jpackageRunClasspath().map(_.path)
    val jars = cp.filter(os.exists).zipWithIndex.map { case (p, idx) =>
      val dest = libs / s"${idx + 1}-${p.last}"
      os.copy(p, dest, createFolders = true)
      dest
    }

    val appName = jpackageName()
    val appType = jpackageType()
    val mainClass = jpackageMainClass()
    val mainJarName = jars.head.last

    val args: Seq[String] = Seq(
      Jvm.jdkTool("jpackage", this.jvmWorker().javaHome().map(_.path)),
      "--type",
      appType,
      "--name",
      appName,
      "--input",
      libs.toString(),
      "--main-jar",
      mainJarName,
      "--main-class",
      mainClass,
      "--win-console" // TODO windows only
    )

    // run jpackage tool
    val outDest = Task.dest / "image"
    os.makeDir.all(outDest)
    os.proc(args).call(cwd = outDest)
    PathRef(outDest)
  }
}
